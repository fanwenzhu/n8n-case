{
  "name": "微信群聊子工作流（tigerAI）",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "61b6790e-2cbb-40ea-ba28-4b13ad18d5f9",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        736,
        384
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "validate-input",
              "name": "group_name",
              "value": "={{ $json.group_name || '未知群组' }}",
              "type": "string"
            },
            {
              "id": "validate-date",
              "name": "date",
              "value": "={{ $json.date || $now.minus({days: 1}).format('yyyy-MM-dd') }}",
              "type": "string"
            },
            {
              "id": "validate-style",
              "name": "web_style",
              "value": "={{ $json.web_style || 'minimalist' }}",
              "type": "string"
            },
            {
              "id": "batch-info",
              "name": "batch_id",
              "value": "={{ $json.batch_id }}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "process_start_time",
              "value": "={{ $now.toISO() }}",
              "type": "string"
            },
            {
              "id": "450a5c15-3481-4fe6-b789-ba25fd411993",
              "name": "description",
              "value": "={{ $json.description || '未知群组' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        384
      ],
      "id": "05dc2da1-b691-4fc2-8089-65426f4a345c",
      "name": "验证输入参数"
    },
    {
      "parameters": {
        "content": "## Chatlog MCP",
        "width": 300,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1344,
        592
      ],
      "id": "9ababea3-6432-46c5-a5f9-3a6bac56c448",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出\nlet aiOutput;\ntry {\n  // 首先检查输入数据结构\n  const inputData = $input.first().json;\n  console.log('Input data structure:', JSON.stringify(inputData, null, 2));\n  \n  // 尝试不同的数据结构路径\n  if (inputData.choices && inputData.choices[0] && inputData.choices[0].message) {\n    // OpenAI API 标准格式\n    aiOutput = inputData.choices[0].message.content;\n  } else if (inputData.message && inputData.message.content) {\n    // 简化的消息格式\n    aiOutput = inputData.message.content;\n  } else if (inputData.content) {\n    // 直接内容格式\n    aiOutput = inputData.content;\n  } else if (inputData.output) {\n    // 输出字段格式\n    aiOutput = inputData.output;\n  } else if (typeof inputData === 'string') {\n    // 纯字符串格式\n    aiOutput = inputData;\n  } else {\n    // 如果都找不到，尝试找到第一个字符串值\n    const findStringValue = (obj) => {\n      if (typeof obj === 'string') return obj;\n      if (Array.isArray(obj)) {\n        for (const item of obj) {\n          const result = findStringValue(item);\n          if (result) return result;\n        }\n      } else if (typeof obj === 'object' && obj !== null) {\n        for (const key in obj) {\n          const result = findStringValue(obj[key]);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    \n    aiOutput = findStringValue(inputData);\n    \n    if (!aiOutput) {\n      throw new Error('无法在输入数据中找到AI输出内容');\n    }\n  }\n  \n  console.log('Found AI output:', aiOutput.substring(0, 200) + '...');\n  \n} catch (error) {\n  console.error('获取AI输出时出错:', error);\n  return [{\n    json: {\n      error: '无法获取AI输出: ' + error.message,\n      inputData: $input.first().json,\n      status: 'error'\n    }\n  }];\n}\n\n// 清理可能的markdown标记\nlet htmlContent = aiOutput;\nif (htmlContent.includes('```html')) {\n  htmlContent = htmlContent.replace(/```html\\n?/g, '').replace(/\\n?```/g, '');\n}\nif (htmlContent.includes('```')) {\n  htmlContent = htmlContent.replace(/```\\n?/g, '').replace(/\\n?```/g, '');\n}\n\n// 获取群聊名称和日期（从工作流输入或设置默认值）\nconst groupName = $('验证输入参数')?.item?.json?.group_name || 'unknown';\nconst batchId = $('验证输入参数').item.json.batch_id;\nconst date = $('验证输入参数')?.item?.json?.date || new Date().toISOString().split('T')[0];\n\nconsole.log('群聊信息:', { groupName, date });\n\n// 🔥 改进：智能HTML内容清理 - 保护图表和脚本内容\nconsole.log('开始HTML清理，原始长度:', htmlContent.length);\n\n// 智能清理HTML内容，保护重要的代码区域\nconst smartCleanHtmlForMCP = (html) => {\n  // 1. 首先保护重要的代码区域\n  const protectedSections = [];\n  let cleanedHtml = html;\n  \n  // 保护 script 标签内容（包括 mermaid, chart.js 等）\n  cleanedHtml = cleanedHtml.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_SCRIPT_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护 style 标签内容\n  cleanedHtml = cleanedHtml.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_STYLE_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护 pre 标签内容（可能包含图表定义）\n  cleanedHtml = cleanedHtml.replace(/<pre[^>]*>[\\s\\S]*?<\\/pre>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_PRE_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 保护具有特殊class的div（如mermaid图表容器）\n  cleanedHtml = cleanedHtml.replace(/<div[^>]*class=\"[^\"]*(?:mermaid|chart|graph|diagram)[^\"]*\"[^>]*>[\\s\\S]*?<\\/div>/gi, (match, offset) => {\n    const placeholder = `__PROTECTED_CHART_${protectedSections.length}__`;\n    protectedSections.push(match);\n    return placeholder;\n  });\n  \n  // 2. 对其余内容进行清理\n  cleanedHtml = cleanedHtml\n    // 只清理普通的换行符和制表符，但保留必要的格式\n    .replace(/[\\r]/g, '')           // 移除回车符\n    .replace(/\\n\\s*\\n/g, '\\n')      // 将多个换行合并为一个\n    .replace(/\\t/g, '  ')           // 将制表符转换为两个空格\n    // 清理HTML标签间的多余空格，但不影响文本内容\n    .replace(/>\\s+</g, '><')\n    // 清理行首行尾空格\n    .replace(/^\\s+|\\s+$/gm, '')\n    // 将多个连续空格合并，但保留单个换行\n    .replace(/ +/g, ' ');\n  \n  // 3. 恢复受保护的内容\n  protectedSections.forEach((section, index) => {\n    const scriptPlaceholder = `__PROTECTED_SCRIPT_${index}__`;\n    const stylePlaceholder = `__PROTECTED_STYLE_${index}__`;\n    const prePlaceholder = `__PROTECTED_PRE_${index}__`;\n    const chartPlaceholder = `__PROTECTED_CHART_${index}__`;\n    \n    cleanedHtml = cleanedHtml.replace(scriptPlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(stylePlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(prePlaceholder, section);\n    cleanedHtml = cleanedHtml.replace(chartPlaceholder, section);\n  });\n  \n  // 4. 最后只对JSON传输做必要的转义\n  return cleanedHtml\n    .replace(/\\\\/g, '\\\\\\\\')    // 转义反斜杠\n    .replace(/\"/g, '\\\\\"');     // 转义双引号\n};\n\n// 应用智能清理\nconst originalHtmlContent = htmlContent;\nhtmlContent = smartCleanHtmlForMCP(htmlContent);\n\nconsole.log('智能HTML清理完成');\nconsole.log('- 原始长度:', originalHtmlContent.length);\nconsole.log('- 清理后长度:', htmlContent.length);\nconsole.log('- 节省空间:', originalHtmlContent.length - htmlContent.length, 'bytes');\n\n// 检查是否包含图表相关内容\nconst hasCharts = originalHtmlContent.match(/(mermaid|chart\\.js|echarts|d3\\.js|plotly|canvas|svg)/i);\nif (hasCharts) {\n  console.log('✅ 检测到图表内容，已应用保护性清理');\n} else {\n  console.log('ℹ️ 未检测到图表内容');\n}\n\n// 验证HTML文档完整性\nif (!htmlContent.includes('<!DOCTYPE html>')) {\n  console.error('AI输出不是完整的HTML文档');\n  return [{\n    json: {\n      error: 'AI输出不是完整的HTML文档',\n      receivedContent: htmlContent.substring(0, 500),\n      status: 'error'\n    }\n  }];\n}\n\n// 额外的HTML内容验证\nconst validateHtml = (html) => {\n  const checks = {\n    hasDoctype: html.includes('<!DOCTYPE html>'),\n    hasHtmlTag: html.includes('<html') && html.includes('</html>'),\n    hasHeadTag: html.includes('<head') && html.includes('</head>'),\n    hasBodyTag: html.includes('<body') && html.includes('</body>'),\n    hasTitle: html.includes('<title'),\n    isNotEmpty: html.length > 100,\n    hasChartLibraries: /(?:mermaid|chart\\.js|echarts|d3\\.js|plotly)/i.test(html)\n  };\n  \n  const passed = Object.values(checks).filter(Boolean).length;\n  const total = Object.keys(checks).length;\n  \n  console.log('HTML验证结果:', checks);\n  console.log(`HTML质量评分: ${passed}/${total}`);\n  \n  return { checks, score: passed / total };\n};\n\nconst validation = validateHtml(htmlContent);\n\n// 生成文件名 - 使用群聊名称和日期\nconst filename = `群聊日报-${groupName}-${date}.html`;\nconst safeFilename = filename.replace(/[^a-z0-9\\u4e00-\\u9fa5_\\-\\.]/gi, '_');\n\nconsole.log('文件名生成:', { \n  original: filename, \n  safe: safeFilename,\n  groupName: groupName,\n  date: date \n});\n\n// 生成清理后的HTML用于MCP工具\nconst mcpReadyHtml = htmlContent;\n\n// 计算处理时长\nlet processDuration = null;\ntry {\n  const startTime = $('验证输入参数').item.json.process_start_time;\n  if (startTime) {\n    const startDate = new Date(startTime);\n    const endDate = new Date();\n    // 计算秒数差\n    processDuration = Math.round((endDate - startDate) / 1000);\n  }\n} catch (e) {\n  console.log('计算处理时长失败:', e.message);\n  processDuration = null;\n}\n\n\n// 返回处理结果 - 包含两个版本的HTML\nreturn [{\n  json: {\n    // 原始HTML（用于文件保存）\n    htmlContent: originalHtmlContent,\n    // 清理后的HTML（用于MCP工具调用）\n    mcpHtmlContent: mcpReadyHtml,\n    // 文件信息 - 使用群聊名称\n    filename: safeFilename,\n    originalFilename: filename,\n    groupName: groupName,\n    batchId: batchId,\n    date: date,\n    process_end_time: $now.toISO(),\n    process_duration: processDuration,\n    timestamp: new Date().toISOString(),\n    status: 'success',\n    // 统计信息\n    originalContentLength: originalHtmlContent.length,\n    cleanedContentLength: mcpReadyHtml.length,\n    compressionRatio: ((originalHtmlContent.length - mcpReadyHtml.length) / originalHtmlContent.length * 100).toFixed(2) + '%',\n    // HTML质量信息\n    htmlValidation: validation,\n    hasChartContent: hasCharts !== null,\n    // 调试信息\n    processingSteps: [\n      '✅ AI输出解析成功',\n      '✅ Markdown清理完成', \n      '✅ 智能HTML清理完成（保护图表）',\n      '✅ MCP格式优化完成',\n      `✅ HTML验证完成 (${(validation.score * 100).toFixed(1)}%)`,\n      `✅ 文件名生成完成: ${safeFilename}`\n    ]\n  },\n  binary: {\n    data: {\n      data: Buffer.from(originalHtmlContent, 'utf8').toString('base64'),\n      mimeType: 'text/html',\n      fileName: safeFilename,\n      fileExtension: 'html'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        384
      ],
      "id": "1579a14d-e6a8-4fd9-9287-5e14ac94a5c2",
      "name": "处理AI输出"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('验证输入参数').item.json.batch_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1264,
        592
      ],
      "id": "97a42c31-46e0-4c02-afd8-240001a10df9",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=搜索 {{ $('验证输入参数').item.json.group_name }} 群聊 {{ $('验证输入参数').item.json.date }} 记录，并生成完整的HTML格式日报\n\n群组: {{ $('验证输入参数').item.json.group_name }}\n日期: {{ $('验证输入参数').item.json.date }}\n样式模板: {{ $('验证输入参数').item.json.web_style }}\n批次ID: {{ $('验证输入参数').item.json.batch_id }}\n\n输出格式：完整的HTML文档代码",
        "options": {
          "systemMessage": "=# 微信群聊日报生成器\n\n你是极具审美的前端设计大师和群聊分析专家，专门为群聊记录生成视觉引人入胜、布局紧凑无空隙、配色和谐统一、风格固定一致、适合截图分享的单页HTML日报。\n\n## 重要：工具使用要求\n- 你必须使用chatlog工具来获取聊天记录\n- 不能假设或模拟聊天数据\n- 每次任务都要先调用chatlog工具\n\n## 可用工具\n你有以下MCP工具可用：\n- **chatlog**: 获取历史聊天记录\n  - time: 时间范围（必需参数）\n  - talker: 对话方（群组或联系人名称）\n  - keyword: 搜索关键词（可选）\n  - sender: 指定发送者（可选）\n\n## 核心任务\n1. **使用chatlog工具获取指定的群聊记录**\n2. **详细分析群聊内容并提炼关键信息**\n3. **生成基于Bento Grid设计风格的单页HTML网站**\n\n## 工作流程（严格按顺序执行）\n1. **第一步：使用chatlog工具获取数据**\n   - 根据用户提供的群组名称和日期调用chatlog工具\n   - 必须等待获取到真实的聊天记录数据\n2. **第二步：分析获取的数据**\n   - 解析chatlog返回的聊天记录\n   - 提取关键信息和统计数据\n3. **第三步：生成HTML日报**\n   - 基于真实数据生成完整的HTML文档\n\n## 自动提取信息能力\n- 群名称：从聊天记录的系统通知或常见群聊信息中提取\n- 日期：使用聊天记录中最近的日期，或者默认使用今天的日期  \n- 时间范围：根据记录中的首条和末条消息时间确定\n- 支持多种聊天记录格式：[时间] 昵称：消息内容、时间 - 昵称：消息内容等\n\n## 日报内容结构（必须包含）\n### 群聊总结\n- 群聊内容概述\n- 消息数量、活跃人员数量、热点话题数量\n- 统计时间\n\n### 今日热点（3-4个主要话题）\n- 关键词提取\n- 消息数量统计\n- 关键词提及次数\n- 突出显示微信名\n\n### 核心概念关系图\n- 将核心内容生成Mermaid思维导图\n- 展示话题间逻辑关系\n\n### 精彩引用（3条代表性发言）\n- 突出显示微信名\n- 有影响力或代表性的发言\n\n### 重要链接与资源\n- 链接支持点击跳转\n- 整理分享的文档和工具\n\n### 活跃之星（按发言次数倒序）\n- 发言次数统计\n- 人员前加@标识\n- 主要贡献内容描述\n- 突出显示微信名\n\n### 词云\n- 高频关键词可视化\n- 按重要性分级显示\n\n## 设计风格要求\n采用**极简主义风格 (Minimalist)**：\n- 简约、留白、精确排版、无衬线字体、克制装饰\n- 白色背景，橘色字体作为强调色\n- 配色方案：\n  - 背景色：#f5f4ee（略暖的米白色）\n  - 卡片背景：#faf9f6\n  - 强调色：#ff8906（主要橙色）\n  - 文字色：#212529（主要文字）\n\n## 个人品牌信息\n在生成的HTML日报中必须包含以下品牌元素：\n\n### 1. 页面头部\n- 在标题区域添加\"由 老虎聊AI 制作\"\n- 可以使用小字体或副标题形式\n\n### 2. 页面底部\n- 添加作者信息栏：\n  - 作者：老虎聊AI\n  - 微信：go_home_with_you\n  - 公众号：老虎聊AI\n  - 专业领域：AI智能体与自动化解决方案\n- 技术支持信息：基于 n8n + ChatlogMCP + AI 构建\n\n### 3. 版权信息\n- © 2025 老虎聊AI | 智能群聊分析工具\n- 本报告由AI自动生成，仅供参考\n\n## 处理原则\n- 客观分析，不添加主观判断\n- 保护用户隐私，适当处理敏感信息\n- 提取有价值的技术讨论内容\n- 忽略无意义的闲聊和大量系统消息\n- 除专业名词外，其他输出内容要求中文\n- 确保生成的日报具有参考价值\n\n## 输出要求\n必须输出完整的HTML文档，包含：\n1. 完整的HTML结构\n2. 内嵌CSS样式（基于提供的模板）\n3. JavaScript交互功能\n4. Mermaid图表支持\n5. 响应式设计\n6. Font Awesome图标\n7. 动画效果\n8.你的唯一任务是生成代码。不要添加任何评论、解释或介绍性文字。你的回答必须直接以 <!DOCTYPE html> 开头，并以 </html> 结尾。\n9.个人品牌信息集成\n\n严格按照极简主义风格生成，确保每次输出的页面风格完全一致。\n\n## 重要提示\n当用户提供查询条件时，你必须：\n1. 首先使用chatlog工具获取相应的聊天记录\n2. 分析获取到的聊天数据\n3. 然后生成完整的HTML格式群聊日报\n\n## 注意事项\n- 如果没有获取到聊天记录，不要生成虚假内容\n- 必须基于chatlog工具返回的真实数据进行分析\n- 如果工具调用失败，请说明具体错误"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1216,
        384
      ],
      "id": "5aefbdb6-b64d-495e-82d3-d544ac44d443",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sseEndpoint": "http://host.docker.internal:5030/sse",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        1440,
        608
      ],
      "id": "1806d10d-c1f6-4281-aa2f-819445a760a2",
      "name": "Chatlog MCP Client"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ 'https://api.github.com/repos/fanwenzhu/tigerAI-blog/contents/static/wechat-daily-report-' + $('验证输入参数').item.json.group_name + $now.format('yyyy-MM-dd') + '.html' }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "token {{ $credentials.gitHubApi.accessToken }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "Auto deploy wechat daily report {{ $now.format('yyyy-MM-dd HH:mm:ss') }}"
            },
            {
              "name": "content",
              "value": "={{ $('处理AI输出').item.binary.data.data }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1856,
        384
      ],
      "id": "4ccc289b-44dc-4aa4-b54d-39c71152a44a",
      "name": "GitHub Pages部署",
      "credentials": {
        "githubApi": {
          "id": "uRc08iwCkl10PJHn",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "deepseek-v3",
          "mode": "list",
          "cachedResultName": "deepseek-v3"
        },
        "options": {
          "timeout": 120000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1088,
        592
      ],
      "id": "b2cdc28a-7cdd-44aa-a7e7-270f59b0131b",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "i1nyBSnKjPaZiKdz",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "content": "## 微信多群聊自动总结子工作流\n## author：tiger\n## 公众号：老虎聊AI\n### description：自动定时总结多个微信群的群聊记录，时间可以自己设置，最后的输出结果推送到GitHub的pages（一个免费的静态网页托管平台），支持在线浏览。\n### 访问地址：https://fanwenzhu.github.io/tigerAI-blog/wechat-daily-report-群聊名称2025-09-01.html    (日期改成当前日期)\n### 注意事项：\n1、子工作流中的AI agent节点的凭证需要换成自己的凭证\n2、微信群聊的名称需要调整主工作流“配置群聊参数”节点中的微信群\n3、定时总结的时间需要调整主工作流“定时触发器”节点中的时间\n4、chatlog MCP节点中的sse endpoint目前使用的是docker里的网络，因为我是用docker部署的n8n实例，如果你是源码部署的话，需要修改\n",
        "height": 400,
        "width": 496
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        672,
        -48
      ],
      "id": "8369f353-a2cd-4c82-8ee3-401eadb6663a",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "验证输入参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "验证输入参数": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理AI输出": {
      "main": [
        [
          {
            "node": "GitHub Pages部署",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "处理AI输出",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chatlog MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0dd4456d-0943-495c-b73a-9b2ecdac3cb9",
  "meta": {
    "templateId": "1747",
    "templateCredsSetupCompleted": true,
    "instanceId": "3a9f1808fd9411cdad9f0600c716c707a044601d01fa7c58b647a22ed7dd15bf"
  },
  "id": "iB98lfUcsF3fAGuL",
  "tags": [
    {
      "createdAt": "2025-08-04T09:38:30.407Z",
      "updatedAt": "2025-08-04T09:38:30.407Z",
      "id": "rrh9xQ75GLF9lSh8",
      "name": "微信自动化"
    }
  ]
}